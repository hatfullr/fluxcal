&input
! This input file contains all the user-controlled variables with their
! default values assigned to them.
!-----------------------------------------------------------------------



      
      
      !### Files to read
      ! flux_cal starts at file number 'start' and ends at file number
      ! 'finish', taking steps of 'step'. All values must be integers.
      start=0
      finish=0
      step=0

      ! The directory flux_cal was installed to. This is used to find the
      ! included tabulated equation of state 'sph.eos' and other data
      ! tables required for flux_cal to run.
      flux_cal_dir='../'

      

      
      
      !### Runtime options
      ! Calculate the flux at each grid cell and record the data.
      get_fluxes=.false.

      ! Set this to true to create a data file containing all the
      ! particles whose surfaces are closest to the observer  along each
      ! driving grid cell. In other words, the particles that flux_cal
      ! first interacts with at each grid cell. The file will be called
      ! 'closest_particles_XXXX.dat' where 'XXXX' is a file number.
      get_closest_particles=.false.

      ! Finds all the particles the ray-tracer comes in contact with at
      ! posx, posy. Units must be in cgs.
      get_particles_at_pos=.false.
      posx=0.d0
      posy=0.d0

      ! Finds the data being used at each integration step at posx, posy
      get_integration_at_pos=.false.

      ! Finds the data being used at each integration step for all grid
      ! cells. Creates one output file for every grid cell, so use with
      ! extreme caution! You must also set get_fluxes to .true. to use this
      ! routine.
      get_integration_at_all_pos=.false.

      ! Track a list of particles through each input file and create
      ! output files containing their data. Specify the file name that
      ! contains the list of particle IDs in 'trackfile', and whether
      ! the resulting output file should be in binary format or in
      ! human readable format by setting 'binary_tracking_file' to
      ! '.true.' or '.false.', respectively.
      ! 'track_all' set to '.true.' tracks all particles without reading
      ! the trackfile.
      track_particles=.false.
      track_all=.false.
      trackfile='fluxcal.particles'
      binary_tracking_file=.false.

      ! Get the information of one particle printed to the standard
      ! output
      get_info_of_particle=.false.
      info_particle=0




      
      !### SPH simulation parameters
      ! nkernel determines what kind of kernel to use. You should set
      ! this to the kernel you used to calculate your data.
      ! 0 is cubic spline
      ! 1 is Wendland 3,3
      ! 2 is Wendland C4
      nkernel=0




      
      !### Integration
      ! Set rotation angles about the x, y, and z axes (degrees)
      anglexdeg=0.d0
      angleydeg=0.d0
      anglezdeg=0.d0
      
      ! yscale proportionality constant
      yscalconst=0.06d0

      ! When the detected flux from the simulation changes by less than
      ! fracaccuracy, grid refinement stops.
      fracaccuracy=0.01d0

      ! These control the resolution of the driving and integration grids.
      ! We vary Nx and Ny to achieve convergence in the flux. You cannot
      ! set max_Nx and max_Ny greater than 512 unless you change the
      ! value of "NXMAPMAX" and "NYMAPMAX" in
      ! optical_depth/optical_depth.h (not recommended).
      min_Nx=3                  ! (default=3)
      min_Ny=3                  ! (default=3)
      max_Nx=512                ! (default=512)
      max_Ny=512                ! (default=512)
      
      ! Choose which integrator to use.
      ! 0 = fourth order adaptive stepsize Runge-Kutta
      ! 1 = Simpson's rule (default)
      ! 0 is probably fastest but may encounter errors. 1 is probably
      ! slower, but you can directly control its accuracy using the
      ! variables below.
      integrator=1

      ! These are for the Runge--Kutta integrator (integrator=0).
      ! step1 is the step size the integrator should take when it is
      ! near tau of 1
      step1=1d0
      step2=1d30
      step3=1d4
      step4=1d15

      ! These control the precision of the Simpson's Rule integrator
      ! (integrator=1). simps_max_frac_dF is the maximum by which the
      ! integrated flux is allowed to change with each step, and the
      ! step size is continually refined until dF is less than or equal
      ! to simps_max_frac_dF. The same is true for optical depth, but
      ! with simps_max_dtau as the controller instead. If you set any of
      ! these to 0.d0, no maximum is imposed (not recommended for
      ! simps_max_frac_dF and simps_max_dtau). All the above is equally
      ! true for the minimum values, but it is okay to set the minimum
      ! to zero, as there are safeguards in place against stepsize
      ! underflows.
      !
      ! Each limit must be given in cgs units.
      simps_min_dz=0            ! (default=0)
      simps_max_dz=0            ! (default=0)

      simps_min_dtau=0          ! (default=0)
      simps_max_dtau=1.d0       ! (default=1.d0)
      
      simps_min_frac_dF=0       ! (default=0)
      simps_max_frac_dF=0       ! (default=0)
      
      ! This controls the threshold for the value that is checked
      ! against simps_min_frac_dF and simps_max_frac_dF. We calculate
      ! that value as |dF/(F+simps_F_cutoff)|. This effectively sets a
      ! "cutoff" value for the flux, such that contributions to the
      ! integrated flux are ignored when they are below simps_F_cutoff.
      ! We advise against setting this to some very small number like
      ! 1.d-30 because the stepsize will become arbitrarily small and
      ! the integrator=1 routine is not good at escaping extremely small
      ! stepsizes.
      simps_F_cutoff=1.d-4      ! (default=1.d-4)
            
      ! This is the fractional amount by which the stepsize is changed
      ! for the Simpson's Rule integrator (integrator=1). That is, when
      ! the stepsize must be decreased, we take dz=simps_alpha*dz, and
      ! when it must be increased, we take dz=(1.d0+simps_alpha)*dz. We
      ! choose 0.5d0 by default such that the stepsize is halved when
      ! it is too large and increased by 1.5 when too small.
      simps_alpha=0.5d0
      
      ! The maximum number of steps the integrator will take before
      ! failing. We recommend MAXSTP=10000 for integrator=0. For
      ! integrator=1, MAXSTP is used to make an initial guess on the
      ! first stepsize. The first stepsize depends on if simps_min_dz
      ! and/or simps_max_dz are non-zero (turned on). We first take the
      ! initial guess of dz=(z2-z1)/abs(MAXSTP), and then make sure
      ! that guess fits within simps_min_dz and simps_max_dz. If it is
      ! outside this domain, we set dz to either simps_min_dz or
      ! simps_max_dz depending on which is closer.
      !
      ! When MAXSTP<0, there is no upper limit on the number of
      ! integration steps for each line of sight. If you do want to
      ! impose a limit, set MAXSTP to a positive value and set
      ! simps_max_step_error=.true. (default). We suggest MAXSTP=-2
      ! (default) for integrator=1. Neither an error nor a warning will
      ! be thrown when MAXSTP<0, so simps_max_step_error and
      ! simps_max_step_warning can be set to anything.
      MAXSTP=-2
      simps_max_step_error=.true.
      simps_max_step_warning=.false.
            
      ! Optical depth at which to stop the integration. Only applies if
      ! get_fluxes or get_integration_at_pos are .true.. Set to 0 to
      ! integrate through the entirety of the fluid on each line of
      ! sight. The value of taulimit_threshold determines how close to
      ! taulimit the integrator must be to stop integration (1.d-6
      ! default, and only works with integrator=1).
      taulimit=1.d1
      taulimit_threshold=1.d-6

      ! Optical depth by which the integrator will detect that a region
      ! is optically thick.
      tau_thick_integrator=1.d1

      ! The value of optical depth that a particle must exceed to be
      ! handled by the envelope fitting routine. 1.d1 by default.
      tau_thick_envfit=1.d1
      
      ! Decide to use the envelope fitting routine or not. Set this to
      ! .false. to use only the SPH temperatures.
      envfit=.true.
      




      
      !### Opacities
      ! When opacityfiles are not present or when a given (rho,T) lies
      ! outside the domain of the opacityfiles, FluxCal uses analytic
      ! approximations to calculate the boundfree, freefree, electron
      ! scatter, and negative H ion opacities, as done in Onno Pols notes
      ! on Stellar Evolution.
      ! astro.ru.nl/~onnop/education/stev_utrecht_notes/chapter5-6.pdf
      
      ! Decide to throw either an error, warning, both, or neither when
      ! (rho,T) is out of bounds for both the opacityfiles and any
      ! available analytic approximations in the code. When using the
      ! analytic approximations, a warning will always be thrown. By
      ! default, the opacity is set to 0.d0 when out of bounds of both the
      ! opacityfiles and analytic approximations.
      !
      ! Setting opacity_analytic_warning to .false. suppresses the warnings
      ! given when FluxCal uses analytic approximations to calculate the 
      ! opacity. This should only be set to .false. for debugging purposes.
      opacity_oob_error=.false.
      opacity_oob_warning=.true.
      opacity_analytic_warning=.true.

      ! Define the rho for which any rho <= this value forces opacity to
      ! equal 0.d0. Default is 1.d-19, which is the minimum density allowed
      ! by the cop subroutine.
      opacity_rho_cutoff=1.d-19

      ! The smoothing window in the temperature direction for opacities. A
      ! window of 0.d0 completely disables smoothing. Units in Kelvin. Do
      ! not make this larger than 1.d4, as this is the minimum distance in
      ! T required to calculate e- scattering and kramer opacities in the
      ! range 1.d4 < T < 1.d8.
      smoothing_window_T = 1000.d0
      smoothing_window_rho = 10.d0
      
      ! Define the opacity files you would like to be read in, as well as
      ! how you would like the code to transition between them. You must
      ! give the maximum and minimum logT and logR values (logTmins,
      ! logTmaxs, logRmins, and logRmaxs). Set these to -1.d30 to use up to
      ! the maximum and minimum in the file. You must also give the point
      ! at which you want opacity blending to begin (logT_blend1,
      ! logT_blend2, logR_blend1, logR_blend2). Blending will always occur
      ! in the region between mins and blend1 and between blend2 and maxs.
      ! No blending is done between blend1 and blend2. Set blend values to
      ! -1.d30 to turn off the blending region.
      !
      ! logR = logRho - 3*logT + 18
      !
      ! You can only use up to 9 opacity files.
      !
      ! The first two values in opacityfiles array are reserved for the
      ! included lowT rosseland and planck opacity files. These files
      ! require the included code "opacity.f" to be read.
      ! For the first two files, 1.0D-19 < rho < 1.0D-7 and
      ! 500 < T < 10000.
      ! logR = logrho - 3logT + 18
      ! for rhomin,Tmin, logR = -9.0969
      ! for rhomin,Tmax, logR = -13
      ! for rhomax,Tmin, logR = 2.90309
      ! for rhomax,Tmax, logR = -1
      ! Thus, the low temperature opacity routine can handle logR in the
      ! following ranges:
      ! -9.0969 < logR < 2.90309  for rhomin < rho < rhomax and T=Tmin
      !     -13 < logR < -1       for rhomin < rho < rhomax and T=Tmax
      ! -9.0969 < logR < -13      for Tmin < T < Tmax and rho=rhomin
      !      -1 < logR < 2.90309  for Tmin < T < Tmax and rho=rhomax
      ! Thus, for any constant temperature within the temperature range,
      ! varying density over the density range gives -13 < logR < 2.90309.
      ! However, for any constant density, varying the temperature over
      ! the temperature range reveals a gap in -9.0969 < logR < -1.
      !
      ! FluxCal always favors results from opacityfiles(1) and
      ! opacityfiles(2) over all other opacityfiles.

      opacityfiles(1)='kP_h2001.dat' ! Planck opacities (lowT)
      logTmins(1)=-1.d30        ! This does nothing. Limits are set in code
      logTmaxs(1)=3.041393      ! Not using Planck opacities above this T
      logRmins(1)=-1.d30        ! This does nothing. Limits are set in code
      logRmaxs(1)=-1.d30        ! This does nothing. Limits are set in code
      logT_blend1(1)=-1.d30     ! No blending at lower T bound
      logT_blend2(1)=2.995635d0 ! Start blending from Planck to Rosseland 
      logR_blend1(1)=-1.d30     ! No blending at lower R bound
      logR_blend2(1)=-1.d30     ! No blending at upper R bound
   
      opacityfiles(2)='kR_h2001.dat' ! Rosseland opacities (lowT)
      logTmins(2)=2.995635d0    ! Not using Rosseland opacities below this
      logTmaxs(2)=-1.d30       ! This does nothing. Limits are set in code
      logRmins(2)=-1.d30        ! This does nothing. Limits are set in code
      logRmaxs(2)=-1.d30        ! This does nothing. Limits are set in code
      logT_blend1(2)=3.041393d0 ! Stop blending from Planck to Rosseland 
      logT_blend2(2)=-1.d30     ! Start blending from Ross. to user files
      logR_blend1(2)=-1.d30     ! No blending at lower R bound
      logR_blend2(2)=-1.d30     ! No blending at upper R bound
      
      opacityfiles(3)='gs98_z0.02_x0.7.data'
      logTmins(3)=3.75d0
      logTmaxs(3)=8.7d0
      logRmins(3)=-8.d0
      logRmaxs(3)=1.d0
      logT_blend1(3)=-1.d30
      logT_blend2(3)=-1.d30
      logR_blend1(3)=-1.d30
      logR_blend2(3)=-1.d30

      opacityfiles(4)=''
      logTmins(4)=-1.d30
      logTmaxs(4)=-1.d30
      logRmins(4)=-1.d30
      logRmaxs(4)=-1.d30
      logT_blend1(4)=-1.d30
      logT_blend2(4)=-1.d30
      logR_blend1(4)=-1.d30
      logR_blend2(4)=-1.d30

      opacityfiles(5)=''
      logTmins(5)=-1.d30
      logTmaxs(5)=-1.d30
      logRmins(5)=-1.d30
      logRmaxs(5)=-1.d30
      logT_blend1(5)=-1.d30
      logT_blend2(5)=-1.d30
      logR_blend1(5)=-1.d30
      logR_blend2(5)=-1.d30

      opacityfiles(6)=''
      logTmins(6)=-1.d30
      logTmaxs(6)=-1.d30
      logRmins(6)=-1.d30
      logRmaxs(6)=-1.d30
      logT_blend1(6)=-1.d30
      logT_blend2(6)=-1.d30
      logR_blend1(6)=-1.d30
      logR_blend2(6)=-1.d30

      opacityfiles(7)=''
      logTmins(7)=-1.d30
      logTmaxs(7)=-1.d30
      logRmins(7)=-1.d30
      logRmaxs(7)=-1.d30
      logT_blend1(7)=-1.d30
      logT_blend2(7)=-1.d30
      logR_blend1(7)=-1.d30
      logR_blend2(7)=-1.d30

      opacityfiles(8)=''
      logTmins(8)=-1.d30
      logTmaxs(8)=-1.d30
      logRmins(8)=-1.d30
      logRmaxs(8)=-1.d30
      logT_blend1(8)=-1.d30
      logT_blend2(8)=-1.d30
      logR_blend1(8)=-1.d30
      logR_blend2(8)=-1.d30
      
      opacityfiles(9)=''
      logTmins(9)=-1.d30
      logTmaxs(9)=-1.d30
      logRmins(9)=-1.d30
      logRmaxs(9)=-1.d30
      logT_blend1(9)=-1.d30
      logT_blend2(9)=-1.d30
      logR_blend1(9)=-1.d30
      logR_blend2(9)=-1.d30
      

      

      ! This is for controlling the Planck and Rosseland opacities of
      ! the lowT opacity files 'kR_h2001.dat' and 'kP_h2001.dat'.
      !    dust_model controls the silicate type
      !       'nrm' - "normal" silicate dust model,    Fe/(Fe+Mg) is 0.3,
      !       'ips' - "iron-poor" silicate dust model, Fe/(Fe+Mg) is 0.0,
      !       'irs' - "iron-rich" silicate dust model, Fe/(Fe+Mg) is 0.4,
      !    dust_topology controls the topology of the grains
      !       'h' - homogeneous particles,
      !       'c' - composite particles,
      !       'p' - porous composite particles,
      !    dust_shape controls the shape of the particles
      !       's' - spherical dust,
      !       'a' - aggregate dust,
      !       '5' - 5-layered spherical dust
      ! For any dust_model, you can not use:
      !    dust_topology is 'h' AND dust_shape is '5'
      !    dust_topology is 'p' AND dust_shape is 'a'
      dust_model='nrm'
      dust_topology='h'
      dust_shape='s'

      
      
      !### Miscellaneous
      ! Solar metallicity
      metallicity=0.02d0
      


      !### Data units
      ! Give the conversion factors from your data's units to cgs.
      ! For example, set runit to 6.955d10 if your distances are measured
      ! in solar radii. This is intended for codes that use intricate
      ! unit systems, such as StarSmasher. If your data is in units that
      ! aren't that intricate, use the flux_cal.baseunits file instead.
      ! For example, StarSmasher uses vunit of sqrt(G*Msun/Rsun) cm/s and
      ! tunit of sqrt(Rsun^3/GMsun).
      !
      ! Be sure to give these in cgs. If you want to use other units,
      ! edit the flux_cal.baseunits file.
      runit=1.d0                ! distance [cm]
      munit=1.d0                ! mass [grams]
      tunit=1.d0                ! time [s]
      vunit=1.d0                ! velocity [cm/s]
      Eunit=1.d0                ! energy [ergs]
      rhounit=1.d0              ! density [grams/cm^3]
      muunit=1.d0               ! mean molecular weight [grams]
      gunit=1.d0                ! local g [cm/s^2]

      ! Give the conversion factor from your input data units to what
      ! you desire the output units to be in. Internal (cgs) values will
      ! be divided by these to produce your output.
      ! These values are affected by the flux_cal.baseunits file.
      runit_out=1.d0            ! distance
      munit_out=1.d0            ! mass
      tunit_out=1.d0            ! time
      vunit_out=1.d0            ! velocity
      Eunit_out=1.d0            ! energy
      rhounit_out=1.d0          ! density
      muunit_out=1.d0           ! mean molecular weight
      gunit_out=1.d0            ! gravitational acceleration
      tempunit_out=1.d0         ! temperature
      punit_out=1.d0            ! pressure
      Lunit_out=1.d0            ! luminosity
      kunit_out=1.d0            ! opacity
      sunit_out=1.d0		! specific entropy



      
      !### File names
      ! File name for the EOS, opacity files, filters file,
      ! and output file. For opacity files, set to '' to not
      ! use any file (turns off that part of the code).
      eosfile='sph.eos'
      filtersfile='filters.dat'
      outfile='flux_cal.output'


      
      !### Internal uses
      ! The debug flag is used internally to make debugging easier.
      debug=.false.

      
!-----------------------------------------------------------------------
&end
