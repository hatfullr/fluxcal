&input
      ! Input file for flux_cal.
!-----------------------------------------------------------------------



      
      
      !### Files to read
      ! flux_cal starts at file number 'start' and ends at file number
      ! 'finish', taking steps of 'step'. All values must be integers.
      start=100
      finish=100
      step=0

      ! The directory flux_cal was installed to. This is used to find the
      ! included tabulated equation of state 'sph.eos' and other data
      ! tables required for flux_cal to run.
      flux_cal_dir = '../..'

      

      
      
      !### Runtime options
      ! Calculate the flux at each grid cell and record the data.
      get_fluxes=.true.

      ! Calculate the true luminosity
      get_true_luminosity=.false.
      
      ! Set this to true to create a data file containing all the
      ! particles whose surfaces are closest to the observer  along each
      ! driving grid cell. In other words, the particles that flux_cal
      ! first interacts with at each grid cell. The file will be called
      ! 'closest_particles_XXXX.dat' where 'XXXX' is a file number.
      get_closest_particles=.false.

      ! Finds all the particles the ray-tracer comes in contact with at
      ! posx, posy. Units must be in cgs.
      get_particles_at_pos=.false.
      posx=0.d0
      posy=0.d0

      ! Finds the data being used at each integration step at posx, posy
      get_integration_at_pos=.false.

      ! Finds the data being used at each integration step for all grid
      ! cells. Creates one output file for every grid cell, so use with
      ! extreme caution! You must also set get_fluxes=.true. to use this
      ! routine.
      get_integration_at_all_pos=.false.

      ! Track a list of particles through each input file and create
      ! output files containing their data. Specify the file name that
      ! contains the list of particle IDs in 'trackfile', and whether
      ! the resulting output file should be in binary format or in
      ! human readable format by setting 'binary_tracking_file' to
      ! '.true.' or '.false.', respectively.
      ! 'track_all' set to '.true.' tracks all particles without reading
      ! the trackfile.
      track_particles=.false.
      track_all=.false.
      trackfile='fluxcal.particles'
      binary_tracking_file=.false.

      ! Get the information of one particle printed to the standard
      ! output
      get_info_of_particle=.false.
      info_particle=199589




      
      !### Simulation parameters
      ! nkernel determines what kind of kernel to use. You should set
      ! this to the kernel you used to calculate your data.
      ! 0 = cubic spline
      ! 1 = Wendland 3,3
      ! 2 = Wendland C4
      nkernel=2




      
      !### Integration
      ! yscale proportionality constant
      yscalconst=0.06d0
      
      fracaccuracy=0.01d0

      ! step1 is the step size the integrator should take when it is
      ! near tau=1
      step1=1d0
      step2=1d30
      step3=1d4
      step4=1d15

      ! The maximum number of steps the integrator will take before failing
      MAXSTP=10000

      ! Optical depth at which to stop the integration. Only applies to
      ! get_fluxes and get_integration_at_pos.
      taulimit=1.d30

      ! Optical depth by which the integrator will detect that a region
      ! is optically thick.
      tau_thick_integrator=1.d30

      ! The value of optical depth that a particle must exceed to be
      ! handled by the envelope fitting routine. 1.d1 by default.
      tau_thick_envfit=1.d1
      
      ! Decide to use the envelope fitting routine or not. Set this to
      ! .false. to use only the SPH temperatures.
      envfit=.false.




      
      !### Data units
      ! Give the conversion factors from your data's units to cgs.
      ! For example, set runit=6.955d10 if your distances are measured
      ! in solar radii. This is intended for codes that use intricate
      ! unit systems, such as StarSmasher. If your data is in units that
      ! aren't that intricate, use the flux_cal.baseunits file instead.
      ! For example, StarSmasher uses vunit=sqrt(G*Msun/Rsun) cm/s and
      ! tunit=sqrt(Rsun^3/GMsun).
      !
      ! Be sure to give these in cgs. If you want to use other units,
      ! edit the flux_cal.baseunits file.
      runit=6.9598d10                ! distance [cm]
      munit=1.9892d33                ! mass [grams]
      tunit=1.59353d3                ! time [s]
      vunit=4.36754d7                ! velocity [cm/s]
      Eunit=3.79447d48                ! energy [ergs]
      rhounit=5.90049d0              ! density [grams/cm^3]
      muunit=1.d0               ! mean molecular weight [grams]
      gunit=2.74079d4                ! local g [cm/s^2]

      ! Give the conversion factor from your input data units to what
      ! you desire the output units to be in. Internal (cgs) values will
      ! be divided by these to produce your output.
      ! These values are affected by the flux_cal.baseunits file.
      runit_out=6.9598d10            ! distance
      munit_out=1.9892d33            ! mass
      tunit_out=1.59353d3            ! time
      vunit_out=4.36754d7            ! velocity
      Eunit_out=3.79447d48            ! energy
      rhounit_out=5.90049d0          ! density
      muunit_out=1.d0           ! mean molecular weight
      gunit_out=2.74079d4            ! gravitational acceleration
      tempunit_out=1.d0         ! temperature
      punit_out=1.d0            ! pressure
      Lunit_out=3.839d33
      kunit_out=1.d0            ! opacity
      
      
      
      !### Physics
      !### Opacities
      ! When opacityfiles are not present or when a given (rho,T) lies outside
      ! the domain of the opacityfiles, FluxCal uses analytic approximations
      ! to calculate the boundfree, freefree, electron scatter, and negative H
      ! ion opacities, as done in Onno Pols notes on Stellar Evolution.
      ! astro.ru.nl/~onnop/education/stev_utrecht_notes/chapter5-6.pdf
      
      ! Decide to throw either an error, warning, both, or neither when (rho,T)
      ! is out of bounds for both the opacityfiles and any available analytic
      ! approximations in the code. When using the analytic approximations,
      ! a warning will always be thrown. By default, the opacity is set to 0.d0
      ! when out of bounds of both the opacityfiles and analytic approximations.
      !
      ! Setting opacity_analytic_warning to .false. suppresses the warnings
      ! given when FluxCal uses analytic approximations to calculate the 
      ! opacity. This should only be set to .false. for debugging purposes.
      opacity_oob_error=.false.
      opacity_oob_warning=.false.
      opacity_analytic_warning=.false.

      ! Define the rho for which any rho <= this value forces opacity to equal
      ! 0.d0. Default is 1.d-19, which is the minimum density allowed by the cop
      ! subroutine.
      opacity_rho_cutoff=2.d-18

      ! The smoothing window in the temperature direction for opacities. A
      ! window of 0.d0 completely disables smoothing. Units in Kelvin. Do not
      ! make this larger than 1.d4, as this is the minimum distance in T 
      ! required to calculate e- scattering and kramer opacities in the range
      ! 1.d4 < T < 1.d8.
      smoothing_window_T = 2000.d0
      !smoothing_window_rho = 10.d0

      ! Define the opacity files you would like to be read in, as well as how
      ! you would like the code to transition between them. You must give the
      ! maximum and minimum logT and logR values (logTmins, logTmaxs,
      ! logRmins, and logRmaxs). Set these to -1.d30 to use up to the maximum
      ! and minimum in the file. You must also give the point at which you want
      ! opacity blending to begin (logT_blend1, logT_blend2, logR_blend1,
      ! logR_blend2). Blending will always occur in the region between mins and
      ! blend1 and between blend2 and maxs. No blending is done between blend1
      ! and blend2. Set blend values to -1.d30 to turn off the blending region.
      !
      ! logR = logRho - 3*logT + 18
      !
      ! You can only use up to 9 opacity files.
      !
      ! The first two values in opacityfiles array are reserved for the
      ! included lowT rosseland and planck opacity files. These files
      ! require the included code "opacity.f" to be read.
      ! For the first two files, 1.0D-19 < rho < 1.0D-7 and
      ! 500 < T < 10000.
      ! logR = logrho - 3logT + 18
      ! for rhomin,Tmin, logR = -9.0969
      ! for rhomin,Tmax, logR = -13
      ! for rhomax,Tmin, logR = 2.90309
      ! for rhomax,Tmax, logR = -1
      ! Thus, the low temperature opacity routine can handle logR in the
      ! following ranges:
      ! -9.0969 < logR < 2.90309  for rhomin < rho < rhomax and T=Tmin
      !     -13 < logR < -1       for rhomin < rho < rhomax and T=Tmax
      ! -9.0969 < logR < -13      for Tmin < T < Tmax and rho=rhomin
      !      -1 < logR < 2.90309  for Tmin < T < Tmax and rho=rhomax
      ! Thus, for any constant temperature within the temperature range,
      ! varying density over the density range gives -13 < logR < 2.90309.
      ! However, for any constant density, varying the temperature over
      ! the temperature range reveals a gap in -9.0969 < logR < -1.
      
      opacityfiles(1)='kP_h2001.dat' ! Planck opacities (lowT)
      logTmins(1)=-1.d30        ! This does nothing. Limits are set in code
      logTmaxs(1)=3.041393      ! Not using Planck opacities above this temperature
      logRmins(1)=-1.d30        ! This does nothing. Limits are set in code
      logRmaxs(1)=-1.d30        ! This does nothing. Limits are set in code
      logT_blend1(1)=-1.d30     ! No blending at lower T bound
      logT_blend2(1)=2.995635d0 ! Start blending from Planck to Rosseland opacities
      logR_blend1(1)=-1.d30     ! No blending at lower R bound
      logR_blend2(1)=-1.d30     ! No blending at upper R bound
   
      opacityfiles(2)='kR_h2001.dat' ! Rosseland opacities (lowT)
      logTmins(2)=2.995635d0    ! Not using Rosseland opacities below this temperature
      logTmaxs(2)=-1.d30        ! This does nothing. Limits are set in code
      logRmins(2)=-1.d30        ! This does nothing. Limits are set in code
      logRmaxs(2)=-1.d30        ! This does nothing. Limits are set in code
      logT_blend1(2)=3.041393d0 ! Stop blending from Planck to Rosseland opacities (log10(1100.d0))
      logT_blend2(2)=3.75d0     ! Start blending from Rosseland to higher temperatures (log10(1.d4-100.d0))
      logR_blend1(2)=-1.d30     ! No blending at lower R bound
      logR_blend2(2)=-1.d30     ! No blending at upper R bound
      
      opacityfiles(3)='gs98_z0.02_x0.7.data'
      logTmins(3)=3.75d0
      logTmaxs(3)=-1.d30
      logRmins(3)=-1.d30
      logRmaxs(3)=-1.d30
      logT_blend1(3)=4.d0
      logT_blend2(3)=-1.d30
      logR_blend1(3)=-1.d30
      logR_blend2(3)=-1.d30

      !opacityfiles(4)='lowT_rt14_ag89_z0.02_x0.7.data'
      !logTmins(4)=3.0d0
      !logTmaxs(4)=4.0d0
      !logRmins(4)=-8.d0
      !logRmaxs(4)=-2.d0
      !logT_blend1(4)=3.2d0
      !logT_blend2(4)=3.8d0
      !logR_blend1(4)=-7.d0
      !logR_blend2(4)=-3.d0

      !opacityfiles(5)='CoxTabor_1975_x0.7_z0.02.dat'
      logTmins(5)=-1.d30
      logTmaxs(5)=-1.d30
      !logTmins(5)=3.480d0
      !logTmaxs(5)=9.0d0
      logRmins(5)=-1.d30
      logRmaxs(5)=-1.d30
      !logRmins(5)=-11.d0
      !logRmaxs(5)=3.d0
      logT_blend1(5)=-1.d30
      logT_blend2(5)=-1.d30
      logR_blend1(5)=-1.d30
      logR_blend2(5)=-1.d30

      opacityfiles(6)=''
      logTmins(6)=-1.d30
      logTmaxs(6)=-1.d30
      logRmins(6)=-1.d30
      logRmaxs(6)=-1.d30
      logT_blend1(6)=-1.d30
      logT_blend2(6)=-1.d30
      logR_blend1(6)=-1.d30
      logR_blend2(6)=-1.d30

      opacityfiles(7)=''
      logTmins(7)=-1.d30
      logTmaxs(7)=-1.d30
      logRmins(7)=-1.d30
      logRmaxs(7)=-1.d30
      logT_blend1(7)=-1.d30
      logT_blend2(7)=-1.d30
      logR_blend1(7)=-1.d30
      logR_blend2(7)=-1.d30

      opacityfiles(8)=''
      logTmins(8)=-1.d30
      logTmaxs(8)=-1.d30
      logRmins(8)=-1.d30
      logRmaxs(8)=-1.d30
      logT_blend1(8)=-1.d30
      logT_blend2(8)=-1.d30
      logR_blend1(8)=-1.d30
      logR_blend2(8)=-1.d30
      
      opacityfiles(9)=''
      logTmins(9)=-1.d30
      logTmaxs(9)=-1.d30
      logRmins(9)=-1.d30
      logRmaxs(9)=-1.d30
      logT_blend1(9)=-1.d30
      logT_blend2(9)=-1.d30
      logR_blend1(9)=-1.d30
      logR_blend2(9)=-1.d30
      
      
      ! Solar metallicity
      metallicity=0.02d0
      
      ! Rotation angle about x axis (degrees)
      anglexdeg=0.d0

      ! Rotation angle about y axis (degrees)
      angleydeg=0.d0

      ! Rotation angle about z axis (degrees)
      anglezdeg=0.d0

      ! Cold temperature dust parameters
      !    dust_model controls the silicate type
      !       'nrm' - "normal" silicate dust model,    Fe/(Fe+Mg)=0.3,
      !       'ips' - "iron-poor" silicate dust model, Fe/(Fe+Mg)=0.0,
      !       'irs' - "iron-rich" silicate dust model, Fe/(Fe+Mg)=0.4,
      !    dust_topology controls the topology of the grains
      !       'h' - homogeneous particles,
      !       'c' - composite particles,
      !       'p' - porous composite particles,
      !    dust_shape controls the shape of the particles
      !       's' - spherical dust,
      !       'a' - aggregate dust,
      !       '5' - 5-layered spherical dust
      ! For any dust_model, you can not use:
      !    dust_topology='h' AND dust_shape='5'
      !    dust_topology='p' AND dust_shape='a'
      dust_model='nrm'
      dust_topology='h'
      dust_shape='s'




      
      !### File names
      ! File name for the opacity files, filters file, and output file.
      ! Set opacitydustfile='' for no dust.
      eosfile='sph.eos'
      !filtersfile='filters.dat'
      filtersfile=''
      outfile='flux_cal.output'


      debug=.true.


      
!-----------------------------------------------------------------------
&end
