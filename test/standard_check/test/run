#!/bin/bash

# This script will run flux_cal in all the directories after cleaning out
# all old output files.

check () {
    if [ $? -ne 0 ]; then
	echo "ERROR"
	exit 1
    fi
}

diffcheck () {
    testdir=$1
    here=$(basename $testdir)
    for j in $(find $origdir/$testdir -type f ! -name 'flux_cal' -and ! -name 'flux_cal.input' -and ! -name "dimen*"); do
	diff --brief $testdir/$(basename $j) $j
	if [ $? -ne 0 ]; then
	    return 1
	fi
    done
    return 0
}

curdir=$(pwd)
errorfile=$curdir/errors.txt
origdir="../original"
dirlist=( $(find . -name flux_cal | rev | cut -d'/' -f2- | rev | cut -d'/' -f2- | sort) )
check

./clean

echo "Writing gfortran version information to $curdir/GNUFortran.txt"
$(which gfortran) --version > GNUFortran.txt

diff --brief $origdir/GNUFortran.txt GNUFortran.txt
if [ $? -ne 0 ]; then
    printf "\e[31mWarning: Your gfortran version differs from the original. This may cause differences in floating point precision, making some or all tests fail. If so, the integrity check can not be trusted. We do not recommend downgrading gfortran, as this is generally harmful. Continue to use this installation of FluxCal at your own risk.\e[0m\n"
else
    echo "Your gfortran version matches the test suite version"
fi

count=1
fail=0
pass=0
error=0
for i in ${dirlist[@]}; do
    prcnt=$(( $count*100 / ${#dirlist[@]} ))
    printf "%03.1d%% [    ] %s " $prcnt "$i"
    \cd $curdir/$i
    ./flux_cal > debug
    if [ $? -ne 0 ]; then
    	error=1
    	echo "$i:" >> $errorfile
    	cat debug >> $errorfile
    fi
    \cd $curdir
    diffcheck $i &>> $errorfile
    if [ $? -ne 0 ]; then
	error=1
    fi

    if [ $error -eq 1 ]; then
	printf "\r%03.1d%% [\e[31mFAIL\e[0m] %s\n" $prcnt "$i"
	fail=$(( $fail + 1 ))
    else
	printf "\r%03.1d%% [\e[32mPASS\e[0m] %s\n" $prcnt "$i"
	pass=$(( $pass + 1 ))
    fi
    
    count=$(( $count + 1 ))
    error=0
done

\cd $curdir

echo ""
echo "Results"
printf "    \e[32mPass\e[0m: %s\n" "$pass"
printf "    \e[31mFail\e[0m: %s\n" "$fail"
printf "   Total: %s\n" "$(( $pass + $fail ))"
echo ""
if [[ "$fail" > 0 ]]; then
    echo "Your installation may be corrupt. Please try re-installing."
    echo "See 'more $curdir/errors.txt' for more information."
    exit 1
else
    echo "Your installation should be stable"
    exit 0
fi
