&input
!-----------------------------------------------------------------------



      
      
      !### Files to read
      ! flux_cal starts at file number 'start' and ends at file number
      ! 'finish', taking steps of 'step'. All values must be integers.
      start=0
      finish=0
      step=0

      ! The directory flux_cal was installed to. This is used to find the
      ! included tabulated equation of state 'sph.eos' and other data
      ! tables required for flux_cal to run.
      flux_cal_dir = '../../../../'

      

      
      
      !### Runtime options
      ! Calculate the flux at each grid cell and record the data.
      get_fluxes=.true.

      ! Set this to true to create a data file containing all the
      ! particles whose surfaces are closest to the observer  along each
      ! driving grid cell. In other words, the particles that flux_cal
      ! first interacts with at each grid cell. The file will be called
      ! 'closest_particles_XXXX.dat' where 'XXXX' is a file number.
      get_closest_particles=.false.

      ! Finds all the particles the ray-tracer comes in contact with at
      ! posx, posy. Units must be in cgs.
      get_particles_at_pos=.false.
      posx=0.d0
      posy=0.d0

      ! Finds the data being used at each integration step at posx, posy
      get_integration_at_pos=.false.

      ! Finds the data being used at each integration step for all grid
      ! cells. Creates one output file for every grid cell, so use with
      ! extreme caution! You must also set get_fluxes=.true. to use this
      ! routine.
      get_integration_at_all_pos=.false.

      ! Track a list of particles through each input file and create
      ! output files containing their data. Specify the file name that
      ! contains the list of particle IDs in 'trackfile', and whether
      ! the resulting output file should be in binary format or in
      ! human readable format by setting 'binary_tracking_file' to
      ! '.true.' or '.false.', respectively.
      ! 'track_all' set to '.true.' tracks all particles without reading
      ! the trackfile.
      track_particles=.false.
      track_all=.false.
      trackfile='fluxcal.particles'
      binary_tracking_file=.false.

      ! Get the information of one particle printed to the standard
      ! output
      get_info_of_particle=.false.
      info_particle=0




      
      !### Simulation parameters
      ! nkernel determines what kind of kernel to use. You should set
      ! this to the kernel you used to calculate your data.
      ! 0 = cubic spline
      ! 1 = Wendland 3,3
      ! 2 = Wendland C4
      nkernel=0




      
      !### Integration
      ! yscale proportionality constant
      yscalconst=0.6d0
      
      fracaccuracy=0.01d0

      ! step1 is the step size the integrator should take when it is
      ! near tau=1
      step1=1d0
      step2=1d30
      step3=1d4
      step4=1d15

      ! Optical depth at which to stop the integration. Only applies to
      ! get_fluxes and get_integration_at_pos.
      taulimit=1.d1

      ! Optical depth by which the integrator will detect that a region
      ! is optically thick.
      tau_thick_integrator=1.d1

      ! The value of optical depth that a particle must exceed to be
      ! handled by the envelope fitting routine. 1.d1 by default.
      tau_thick_envfit=1.d1
      
      ! Decide to use the envelope fitting routine or not. Set this to
      ! .false. to use only the SPH temperatures.
      envfit=.true.




      
      !### Data units
      ! Give the conversion factors from your data's units to cgs.
      ! For example, set runit=6.955d10 if your distances are measured
      ! in solar radii. This is intended for codes that use intricate
      ! unit systems, such as StarSmasher. If your data is in units that
      ! aren't that intricate, use the flux_cal.baseunits file instead.
      ! For example, StarSmasher uses vunit=sqrt(G*Msun/Rsun) cm/s and
      ! tunit=sqrt(Rsun^3/GMsun).
      !
      ! Be sure to give these in cgs. If you want to use other units,
      ! edit the flux_cal.baseunits file.
      runit=6.9598d10                ! distance [cm]
      munit=1.9892d33                ! mass [grams]
      tunit=1.59353d3                ! time [s]
      vunit=4.36754d7                ! velocity [cm/s]
      Eunit=3.79447d48                ! energy [ergs]
      rhounit=5.90049d0              ! density [grams/cm^3]
      muunit=1.d0               ! mean molecular weight [grams]
      gunit=2.74079d4                ! local g [cm/s^2]

      ! Give the conversion factor from your input data units to what
      ! you desire the output units to be in. Internal (cgs) values will
      ! be divided by these to produce your output.
      ! These values are affected by the flux_cal.baseunits file.
      runit_out=1.d0            ! distance
      munit_out=1.d0            ! mass
      tunit_out=1.d0            ! time
      vunit_out=1.d0            ! velocity
      Eunit_out=1.d0            ! energy
      rhounit_out=1.d0          ! density
      muunit_out=1.d0           ! mean molecular weight
      gunit_out=1.d0            ! gravitational acceleration
      tempunit_out=1.d0         ! temperature
      punit_out=1.d0            ! pressure
      Lunit_out=1.d0            ! luminosity
      kunit_out=1.d0            ! opacity
      sunit_out=1.d0		! specific entropy
      
      
      
      !### Physics
      ! If true, use Rosseland opacities only. If false, will use
      ! Rosseland and Planck opacities with a smoothing function.
      rossonly=.false.
      
      ! Solar metallicity
      metallicity=0.02d0
      
      ! Rotation angle about x axis (degrees)
      anglexdeg=0.d0

      ! Rotation angle about y axis (degrees)
      angleydeg=0.d0

      ! Rotation angle about z axis (degrees)
      anglezdeg=0.d0

      ! Dust formation radius (set to 1.d30 for no dust)
      Rform=1.d30

      ! Cold temperature dust parameters
      !    dust_model controls the silicate type
      !       'nrm' - "normal" silicate dust model,    Fe/(Fe+Mg)=0.3,
      !       'ips' - "iron-poor" silicate dust model, Fe/(Fe+Mg)=0.0,
      !       'irs' - "iron-rich" silicate dust model, Fe/(Fe+Mg)=0.4,
      !    dust_topology controls the topology of the grains
      !       'h' - homogeneous particles,
      !       'c' - composite particles,
      !       'p' - porous composite particles,
      !    dust_shape controls the shape of the particles
      !       's' - spherical dust,
      !       'a' - aggregate dust,
      !       '5' - 5-layered spherical dust
      ! For any dust_model, you can not use:
      !    dust_topology='h' AND dust_shape='5'
      !    dust_topology='p' AND dust_shape='a'
      dust_model='nrm'
      dust_topology='h'
      dust_shape='s'




      
      !### File names
      ! File name for the opacity files, filters file, and output file.
      ! Set opacitydustfile='' for no dust.
      eosfile='sph.eos'
      opacityfile='sph.opacities_ferguson_yes_grains_and_molecules'
      opacitydustfile='sph.opacities_yes_grains_and_molecules_ncooling2'
      filtersfile='filters.dat'
      outfile='flux_cal.output'




      
!-----------------------------------------------------------------------
&end
